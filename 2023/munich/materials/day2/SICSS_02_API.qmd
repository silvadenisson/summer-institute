---
title: "Application Programming Interfaces"
author: "Jan Zilinsky (TUM); Thanks to: Carsten Schwemmer, Chris Bail"
institute: "Summer Institute in Computational Social Science"
format: 
  revealjs:
    slide-number: c
editor_options: 
  chunk_output_type: console
---

```{r}
#| eval: true
#| echo: false
library(tidyverse)
library(guardianapi)

githubURL <- "https://github.com/zilinskyjan/lectures/blob/main/data/guardian_economy2023.rds?raw=true"

# Download data
temp <- tempfile()
download.file(githubURL, temp, mode = "wb") # The mode = "wb" argument in download.file tells R to download the file in binary mode

# Read in the data:
econ <- readRDS(temp)
unlink(temp)  # Clean up the temporary file
```

## What is an API?

 
```{r, out.width='75%', echo = FALSE}
knitr::include_graphics('img/api/api_infographic.jpg')
```

::: aside
https://www.govtech.com/applications/Whats-an-API-and-Why-Do-You-Need-One.html
:::

## Growth of APIs {.smaller}

```{r, out.width='85%', echo = FALSE}
knitr::include_graphics('img/api/api_growth.png')
```

::: aside
https://www.programmableweb.com/news/apis-show-faster-growth-rate-2019-previous-years/research/2019/07/17
:::

## Strengths and weaknesses of APIs  {.smaller}

Advantages:

- Accessing APIs is legal and in most cases well defined( e.g. 10,000 requests per day)
- We do not have to apply scraping procedures for unstructured data (e.g. web pages)
- for some APIs R packages make it very easy to collect data

Some drawbacks: 

- We first have to learn how to use the API
- Many APIs require authenification and / or are not available for free
- We may suddenly lose access (case study: Twitter in 2023)

# Working with APIs in R

## Useful packages

```{r, eval = FALSE}
#| echo: true
install.packages(c('usethis', 'httr'))

install.packages("guardianapi")
```

## Guardian API - credentials

To retrieve a Guardian API key, fill out the developer register form: https://open-platform.theguardian.com/access/

An easy way to include api keys in R scripts is to store them as strings:

```{r}
#| eval: false
#| echo: true
GU_API_KEY <- "your_api_key"

# Or your API key and press enter
gu_api_key()
```


If you share your script, others can see and use your key.

## Guardian API - credentials

A better way is to store the key in your R environment with `usethis::edit_r_environ()` and to reload it afterwards

##

```{r}
#| eval: true
#| echo: true
library(guardianapi)
```

- Again, get your key here: https://open-platform.theguardian.com/access/
- I already added my key into .Renviron using `usethis::edit_r_environ()`
- It is stored as: `Sys.getenv("GU_API_KEY")` 

. . .

- Simple example: https://content.guardianapis.com/search?from-date=2023-01-01&q=%22economy%22&api-key=test


## Example - Guardian API

http://open-platform.theguardian.com/explore

- the [Guardian API](http://open-platform.theguardian.com/explore/) allows to retrieve meta data and full texts from articles of the british newspaper
- we can access data from different endpoints (see documentation), e.g. `content`, which we will access using `guardianapi::gu_content()`


## Example - Guardian API explorer

```{r, out.width='100%', echo = FALSE}
knitr::include_graphics('img/api/guardian_explorer.png')
```

## Guardian API

For communication with the API we need:

- an API key
- the correct base URL
- a set of parameters accoring to the *rules* of the API. Parameters will influence what kind of data the API returns.

## Download articles about the economy

```{r}
#| eval: false
#| echo: true
economy <- gu_content(query = "economy", 
                   from_date = "2023-01-01",
                   to_date = "2023-07-01")
```


## Select desired columns

```{r}
#| eval: false
#| echo: true
econ <- economy %>% select(id,type,section_name,
                                    web_publication_date,web_title,tags,
                                    publication,
                                    short_url,
                                    headline,
                                    body_text)
```

::: aside
If you have trouble, you can download a set of articles at this link
https://github.com/zilinskyjan/lectures/blob/main/data/guardian_economy2023.rds?raw=true
:::

## Examine the data object

```{r}
#| echo: true
econ
```

##

```{r}
#| echo: true
names(econ)

glimpse(econ)

```

##

```{r}
#| echo: true
table(econ$publication)

econ$body_text[1:5]
```

##

```{r}
#| echo: true
head(econ$web_publication_date)

str(econ$web_publication_date)
```

Let's convert -- or, rather, create a new variable -- so that we can work with a simpler date format:

```{r}
#| echo: true
econ$date <- lubridate::date(econ$web_publication_date)
```

##

```{r}
#| echo: true
head(econ$date)
```

##

```{r}
#| echo: true
econ %>% 
 count(section_name) %>%
 arrange(desc(n))
```

##

```{r}
#| echo: true
econ %>% 
 count(date) %>%
 ggplot(aes(x=date,y=n)) +
 geom_col() +
 labs(x="",y="Daily articles",title="Articles in The Guardian mentioning the economy")
```

## General advice

Avoid including your authentication information (authentication keys, secrets, tokens) into your R code.

```{r}
#| eval: false
usethis::edit_r_environ(scope = "user")
```

If you are using RStudio, edit you user-level .Renviron file

Recommended chapter and article: 

- https://bookdown.org/paul/apis_for_social_scientists/best-practices.html
- https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf

## Resources

- https://github.com/public-apis/public-apis#open-data
- https://bookdown.org/paul/apis_for_social_scientists/

# Our World in Data

##

![](img/owid.png)


## Collecting data easily

- You could of course go to https://ourworldindata.org,find variables you need and download a csv file
- Same for WDI: https://databank.worldbank.org/source/world-development-indicators
- But the data may be revised and it is bound to updated next year
- What's the preferred workflow?


##

```{r}
#| echo: true
#| eval: false
# install.packages("owidR")
# devtools::install_github("piersyork/owidR")
library(owidR)

owid_search("corruption")
owid_search("emissions")
```

##

```{r}
#| echo: true
#| eval: false


CPI <- owid("Corruption Perception Index", rename = "CPI")
co2 <- owid("co2-emissions-and-gdp-per-capita")

owid_source(CPI)
```

See: https://cran.r-project.org/web/packages/owidR/vignettes/example-analysis.html